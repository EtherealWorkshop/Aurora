#!/bin/bash

crc8() {
    local -n bytes=$1
    local crc=0
    for byte in "${bytes[@]}"; do
        crc=$((crc ^ (byte << 8)))
        for _ in {1..8}; do
            if ((crc & 0x8000)); then
                crc=$((crc ^ (0x1070 << 3)))
            fi
            crc=$((crc << 1))
        done
    done
    echo $(( (crc >> 8) & 0xFF ))
}

kernver="$1"
kvarg=$((kernver))
shift
ver="0"
for arg in "$@"; do
    case "$arg" in
        --ver=1) ver="1" ;;
        *) ;;
    esac
done

if ! [[ "$kernver" =~ ^0x[0-9a-fA-F]+$ ]] || (( ${#kernver} > 10 )); then exit 1; fi

buffer=()
if [[ "$ver" == "1" ]]; then
    structver=0x10
    structsize=$((3 + 1 + 4 + 32))
    crc8=0
    flags=0x00
    buffer=(
        $structver
        $structsize
        0x00
        $flags
        $(( (kvarg >>  0) & 0xFF ))
        $(( (kvarg >>  8) & 0xFF ))
        $(( (kvarg >> 16) & 0xFF ))
        $(( (kvarg >> 24) & 0xFF ))
    )
    for _ in $(seq 1 32); do
        buffer+=(0x00)
    done
    crc_input=("${buffer[@]:3}")
    crc=$(crc8 crc_input)
    buffer[2]=$crc
else
    structver=0x02
    uid=$((0x4752574c))
    reserved=(0x00 0x00 0x00)
    buffer=(
        $structver
        $(( (uid >>  0) & 0xFF ))
        $(( (uid >>  8) & 0xFF ))
        $(( (uid >> 16) & 0xFF ))
        $(( (uid >> 24) & 0xFF ))
        $(( (kvarg >>  0) & 0xFF ))
        $(( (kvarg >>  8) & 0xFF ))
        $(( (kvarg >> 16) & 0xFF ))
        $(( (kvarg >> 24) & 0xFF ))
        "${reserved[@]}"
    )
    crc=$(crc8 buffer)
    buffer+=($crc)
fi
for b in "${buffer[@]}"; do
    printf "%02x " "$b"
done
echo -e "\n"