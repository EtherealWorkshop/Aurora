#!/bin/busybox sh

export COLOR_RESET="\033[0m"
export BLACK_B="\033[1;30m"
export RED_B="\033[1;31m"
export GEEN="\033[0;32m"
export GEEN_B="\033[1;32m"
export YELLOW="\033[0;33m"
export YELLOW_B="\033[1;33m"
export BLUE_B="\033[1;34m"
export MAGENTA_B="\033[1;35m"
export PINK_B="\x1b[1;38;2;235;170;238m"
export CYAN_B="\033[1;36m"
export PS1='\e[1;34m\]\u@\h \e[1;33m\]$(date +"%H:%M %b %d")\e[1;32m\] \w/\[\e[0m\] '

auroraselected() {
    echo "Moving mounts to /auroraroot"
    mkdir -p "/auroraroot/sys"
    mount -n -o move "/sys" "/auroraroot/sys"
    mkdir -p "/auroraroot/proc"
    mount -n -o move "/proc" "/auroraroot/proc"
    mkdir -p "/auroraroot/dev"
    mount -n -o move "/dev" "/auroraroot/dev"
    mkdir -p /auroraroot/initramfs || {
        echo "Filesystem marked itself as read only. This is fixed with rebooting."
        sleep 5
        reboot -f
    }
    chmod +x /auroraroot/etc/init.d/aurora
    chmod +x /auroraroot/usr/share/aurora/aurora.sh
    pivot_root /auroraroot /auroraroot/initramfs
    umount -l /initramfs
    exec /sbin/init < "$TTY1" >> "$TTY1" 2>&1
}

splash() {
    clear
        echo -ne "$BLUE_B"
    cat <<'EOF'
╒════════════════════════════════════════╕
│ .    . .    '    +   *       o    .    │
│+  '.                    '   .-.     +  │
│          +      .    +   .   ) )     ''│
│                   '  .      '-´  *.    │
│     .    \      .     .  .  +          │
│         .-o-'       '    .o        o   │
│  *        \      *            +'       │
│                '       '               │
│        .*       .       o   o      .   │
│              o     . *.                │
│ 'o*           .        .'    .         │
│           ━┳━           ┏━┏━     *     │
│     .*     ┃ ┏┓▪╋┏┓┏┓┏┳┓┣╸┗┓  . \      │
│     o     ━┻━┛┗┻┻┛ ┗┻┛┗┗┛ ━┛     +     │
╘════════════════════════════════════════╛
              Initramfs Menu
EOF
    echo -e "${COLOR_RESET}\n"
}

shimbootselected() {
    shimboot_partition=$(blkid | grep 'PARTLABEL="shimboot_rootfs' | awk -F: '{print $1}' | head -n1 || true)
    if [ -n "$shimboot_partition" ]; then
        exec /bootstrap.sh < "$TTY1" >> "$TTY1" 2>&1
    else
        shimdir="/auroraroot/usr/share/aurora/images/shims/"
        i=1

        for shim in "$shimdir"/*.bin; do
            [ -e "$shim" ] || continue
            echo "$i) $(basename "$shim")"
            eval "file_$i=\"\$shim\""
            i=$((i + 1))
        done

        if [ "$i" -eq 1 ]; then
            echo "No shims found."
            rm -f /auroraroot/etc/shimboot
            return 1
        fi

        echo -n "Choose your shimboot shim: "
        read choice

        eval "shim=\$file_$choice"

        if [ -n "$shim" ] && [ -e "$shim" ]; then

            mountpoint -q /auroraroot || mount "$dev_partition" /auroraroot

            a_free_kb=$(df -k /auroraroot | awk 'NR==2 {print $4}')
            a_free_bytes=$((a_free_kb * 1024))
            echo "Available: $(numfmt --to=iec "$a_free_bytes")"
            echo -e "${RED_B}WARNING: THE SHIMBOOT PARTITION CAN NOT BE RESIZED LATER!${COLOR_RESET}"
            echo -n "Enter size to allocate to shimboot rootfs [Ex: 1G]: "
            read size

            shimbytes=$(stat -c %s "$shim")
            extrabytes=$(numfmt --from=iec "$size" 2>/dev/null || echo 0)
            totalbytes=$((shimbytes + extrabytes))

            if [ "$totalbytes" -ge "$a_free_bytes" ]; then
                echo "ERROR: Not enough free space in Aurora to shrink by $(numfmt --to=iec "$totalbytes")"
                umount /auroraroot
                return 1
            fi
            if [ "$extrabytes" -le 0 ]; then
                echo "Invalid size."
                return 1
            fi

            totalsectors=$(( (totalbytes + 511) / 512 ))

            aurorainfo=$(sgdisk -i 4 "$dev")
            aurorastart=$(echo "$aurorainfo" | grep "First sector" | awk '{print $3}')
            auroraend=$(echo "$aurorainfo" | grep "Last sector" | awk '{print $3}')
            newauroraend=$((auroraend - totalsectors))
            shimbootpartition_start=$((newauroraend + 1))

            if [ "$newauroraend" -le "$aurorastart" ]; then
                echo "ERROR: Cannot shrink Aurora below minimum size"
                return 1
            fi

            umount /auroraroot || {
                echo "Failed to unmount filesystem"
                return 1
            }
            e2fsck -f "$dev_partition" || {
                echo "Failed to check filesystem"
                return 1
            }
            blocks=$(( newauroraend - aurorastart + 1 ))
            echo "Resizing Aurora filesystem to $blocks sectors..."
            resize2fs "$dev_partition" "${blocks}s" || {
                echo "Failed to resize filesystem"
                return 1
            }

            sgdisk --delete=4 "$dev"
            sgdisk --new=4:${aurorastart}:${newauroraend} -c 4:"Aurora" "$dev"

            partprobe "$dev"
            sleep 5

            for i in $(seq 1 5); do
                dev_partition=$(blkid | grep 'LABEL="Aurora"' | awk -F: '{print $1}')
                if [ -n "$dev_partition" ] && [ -e "$dev_partition" ]; then break; fi
                sleep 1
            done

            if [ ! -e "$dev_partition" ]; then
                echo "failed to find aurora partition"
                return 1
            fi

            e2fsck -f "$dev_partition" || {
                echo "Failed to check filesystem"
                return 1
            }

            mount "$dev_partition" /auroraroot || {
                echo "Failed to mount filesystem"
                return 1
            }

            looproot=$(losetup -Pf --show "$shim")
            looprootpart=$(blkid | grep 'PARTLABEL="shimboot_rootfs' | grep "$looproot" | awk -F: '{print $1}' | head -n1 || true)
            sgdisk --delete=5 "$dev" 2>/dev/null
            sgdisk --new=5:${shimbootpartition_start}:0 -c 5:"$(lsblk -no PARTLABEL $looprootpart)" "$dev"

            partprobe "$dev"
            sleep 5

            for i in $(seq 1 5); do
                shimboot_partition=$(blkid | grep "$dev" | grep 'PARTLABEL="shimboot_rootfs' | awk -F: '{print $1}' | head -n1 )
                if [ -n "$shimboot_partition" ] && [ -e "$shimboot_partition" ]; then break; fi
                sleep 1
            done

            mkfs.ext4 -F "$shimboot_partition" # or, i could do yes | mkfs.ext4 "$shimboot_partition" (but im not a dumbass)
            mkdir -p /mnt/shimloop /mnt/newshim
            mount "$looprootpart" /mnt/shimloop
            mount "$shimboot_partition" /mnt/newshim
            sleep 5
            rsync -avH /mnt/shimloop/. /mnt/newshim/ --info=progress2 || {
                echo "Failed to copy filesystem"
                return 1
            }
            umount /mnt/shimloop /mnt/newshim
            losetup -d "$looproot"

            echo "shimboot_rootfs successfully copied to $shimboot_partition"
            exec /bootstrap.sh < "$TTY1" >> "$TTY1" 2>&1
        else
            echo "Invalid choice... somehow"
            return 1
        fi
    fi
}

confirmation() {
    echo -ne "Confirm $1? (Y/n) "
    shift
    read confirm
    case $confirm in
    n|N|no|NO|No) return 0 ;;
    *) $@ ;;
    esac
}

manageshimboot() {
    dev_partition=$(blkid | grep 'LABEL="Aurora"' | awk -F: '{print $1}' | head -n1)
    dev=$(echo "$dev_partition" | sed -E 's/p?[0-9]+$//')
    shimboot_partition=$(blkid | grep "$dev" | grep 'PARTLABEL="shimboot_rootfs' | awk -F: '{print $1}' | head -n1)
    shimboot_partnum=$(echo "$shimboot_partition" | grep -o '[0-9]*$')
    dev_partnum=$(echo "$dev_partition" | grep -o '[0-9]*$')
    splash
    echo -e "1. Delete Shimboot partition"
    echo -e "2. Return to menu\n"
    echo -ne "${GEEN_B}(shimboot)> ${COLOR_RESET}"
    read initselection
    case $initselection in
        1) confirmation "deletion of Shimboot partition on $shimboot_partition" "sgdisk --delete=\"$shimboot_partnum\" $dev" ;;
        2) return 0 ;;
        *) echo "Invalid Option" ;;
    esac
}

manageaurora() {
    dev_partition=$(blkid | grep 'LABEL="Aurora"' | awk -F: '{print $1}' | head -n1)
    dev=$(echo "$dev_partition" | sed -E 's/p?[0-9]+$//')
    shimboot_partition=$(blkid | grep "$dev" | grep 'PARTLABEL="shimboot_rootfs' | awk -F: '{print $1}' | head -n1)
    shimboot_partnum=$(echo "$shimboot_partition" | grep -o '[0-9]*$')
    dev_partnum=$(echo "$dev_partition" | grep -o '[0-9]*$')
    splash
    echo -e "No current options for Aurora"
    echo -e "1. Return to menu\n"
    echo -ne "${GEEN_B}(aurora)> ${COLOR_RESET}"
    read initselection
    case $initselection in
        1) return 0 ;;
        *) echo "Invalid Option" ;;
    esac
}

dboot() {
    echo $1 > /auroraroot/etc/initramfs.defaultboot 
    echo -n "Enter timeout length before booting (seconds): "
    read timeout
    if [ -z $timeout ]; then
        echo "No timeout specified. Defaulting to 5 Seconds"
        timeout="5"
    fi
    echo $timeout >> /auroraroot/etc/initramfs.defaultboot
}

manage() {
    dev_partition=$(blkid | grep 'LABEL="Aurora"' | awk -F: '{print $1}' | head -n1)
    dev=$(echo "$dev_partition" | sed -E 's/p?[0-9]+$//')
    shimboot_partition=$(blkid | grep "$dev" | grep 'PARTLABEL="shimboot_rootfs' | awk -F: '{print $1}' | head -n1)
    splash
    if [ -z "$dev_partition" ] && [ -z "$shimboot_partition" ]; then
        echo "No Aurora or Shimboot partitions. How on earth did this happen? Ask yourself that question. What were you thinking???"
        sleep 15
        return 1
    fi

    echo -e "Select a partition to manage"
    n=1

    if [ -n "$dev_partition" ]; then
        echo "$n. Manage Aurora on ${dev_partition}"
        manageaurora=$n
        n=$((n + 1))
    fi

    if [ -n "$shimboot_partition" ]; then
        echo "$n. Manage Shimboot on ${shimboot_partition}"
        manageshimboot=$n
        n=$((n + 1))
    fi
    echo -e "$n. Set default boot target"
    setdefaultboot=$n
    n=$((n + 1))

    echo -e "$n. Return to menu\n"
    menu=$n

    echo -ne "${GEEN_B}(manage)> ${COLOR_RESET}"
    read manageselection

    if [ "$manageselection" = "$manageaurora" ]; then
        manageaurora || sleep 5
    elif [ "$manageselection" = "$manageshimboot" ]; then
        manageshimboot || sleep 5
    elif [ "$manageselection" = "$menu" ]; then
        return 0
    elif [ "$manageselection" = "$setdefaultboot" ]; then
        splash
        echo -e "Set default boot:"
        echo -e "1. Aurora"
        echo -e "2. Shimboot"
        echo -e "3. Clear default boot"
        echo -ne "${GEEN_B}(default)> ${COLOR_RESET}"
        read defaultchoice
        case $defaultchoice in
            1) dboot "Aurora" ;;
            2) dboot "Shimboot" ;;
            3) rm -f /auroraroot/etc/initramfs.defaultboot ;;
            *) echo "Invalid Option" ;;
        esac
    else
        echo "Invalid Option"
    fi
}

clear
echo "Making the auroraroot partition..."
mkdir -p /auroraroot || sleep 10
dev_partition=$(blkid | grep 'LABEL="Aurora"' | awk -F: '{print $1}' | head -n1 || true)
dev=$(echo "$dev_partition" | sed -E 's/p?[0-9]+$//')
if [ -z "$dev_partition" ]; then
    echo "failed to find aurora partition"
    sleep 5
    exit 1
fi
chmod +x /resize
bash /resize
sync
echo "Mounting device..."
mount $dev_partition /auroraroot

defaultboot="/auroraroot/etc/initramfs.defaultboot"
if [ -f "$defaultboot" ]; then
    timeout=$(cat "$defaultboot" | tail -n1)
    defaultboot=$(cat "$defaultboot" | head -n1)
    echo -e "${YELLOW_B}Booting $defaultboot in $timeout seconds... Press any key to cancel.${COLOR_RESET}"
    read -t $timeout -n1 key && cancel=true
    if [ -z "$cancel" ]; then
        case "$defaultboot" in
            Aurora) auroraselected ;;
            Shimboot) shimbootselected ;;
            *) echo "Invalid default boot entry (what did you do)" ;;
        esac
        sleep 5
    fi
fi

while true; do
    splash
    echo -e "1. Aurora (${YELLOW_B}${dev_partition}${COLOR_RESET})"
    echo -e "2. Shimboot (If you have it)"
    echo -e "3. Manage partitions"
    echo -e "4. Shell\n"
    echo -ne "${GEEN_B}(initramfs)> ${COLOR_RESET}"
    read initselection
    case $initselection in
        1) auroraselected || sleep 5 ;;
        2) shimbootselected || sleep 5 ;;
        3) manage || sleep 5 ;;
        4) clear && script -qfc 'stty sane && stty erase '^H' && exec busybox sh -l' /dev/null ;;
        *) echo "Invalid Option" ;;
    esac
done
