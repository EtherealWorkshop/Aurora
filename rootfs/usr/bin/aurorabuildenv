#!/bin/bash

export COLOR_RESET="\033[0m"
export BLACK_B="\033[1;30m"
export RED_B="\033[1;31m"
export GEEN="\033[0;32m"
export GEEN_B="\033[1;32m"
export YELLOW="\033[0;33m"
export YELLOW_B="\033[1;33m"
export BLUE_B="\033[1;34m"
export MAGENTA_B="\033[1;35m"
export PINK_B="\x1b[1;38;2;235;170;238m"
export CYAN_B="\033[1;36m"

stty echo
tput cnorm

lsbval() {
  local key="$1"
  local lsbfile="${2:-/etc/lsb-release}"

  if ! echo "${key}" | grep -Eq '^[a-zA-Z0-9_]+$'; then
    return 1
  fi

  sed -E -n -e \
    "/^[[:space:]]*${key}[[:space:]]*=/{
      s:^[^=]+=[[:space:]]*::
      s:[[:space:]]+$::
      p
    }" "${lsbfile}"
}

release_board=$(lsbval CHROMEOS_RELEASE_BOARD 2>/dev/null)
export board_name=${release_board%%-*}



downloadrawshim() {
    export basebuildshim="$aroot/build/.$board_name.bin"
    if [ ! -f "$basebuildshim" ]; then
        echo "Downloading Raw Shim for $board_name [ https://github.com/EtherealWorkshop/sh1mmer/releases/download/v1.0.0/${board_name}.bin ]"
        wget -q --show-progress "https://github.com/EtherealWorkshop/sh1mmer/releases/download/v1.0.0/${board_name}.bin" -O "$basebuildshim"
    fi
}
export alpinebuild="$aroot/build/env/alpine"
export crosbuild="$aroot/build/env/cros"
export debianbuild="$aroot/build/env/debian"
export archbuild="$aroot/build/env/arch"
mkdir -p "$alpinebuild" "$crosbuild" "$debianbuild" "$archbuild"

aurorabuildenv-help() {
    cat <<'EOF'
Usage: command [options]

Commands:
    help    display this menu
    list    display created build environments
    create  create a build environment
    delete  delete a build environment
    start   start a build environment
    exit    exits back to Aurora menu

Options:
Required:
    -c  --cros      applies action to cros env
    -al --alpine    applies action to alpine env
    -d  --debian    applies action to debian env
    -ar --arch      applies action to arch env
EOF
}
aurorabuildenv-list() {
    find $aroot/build/ -type f -name .exists | awk -F/ '{print $7}'
}
aurorabuildenv-create() {
    downloadrawshim
    mkdir -p "$alpinebuild" "$crosbuild" "$debianbuild" "$archbuild"
    local buildenvname=""
    case "$1" in
        -al|--alpine)
            buildenvname="alpine"
            ;;
        -c|--cros)
            buildenvname="cros"
            ;;
        -d|--debian)
            buildenvname="debian"
            ;;
        -ar|--arch)
            buildenvname="arch"
            ;;
        *)
            echo "Usage: create [-al | --alpine] [-c | --cros] [-d | --debian] [-ar | --arch]"
            return 1
            ;;
    esac
    if [ "${buildenvname}" = "alpine" ]; then
        if [ ! -e "${aroot}/build/env/${buildenvname}/etc/.exists" ]; then
            export alpinebuild="$aroot/build/env/alpine"
            wget -q --show-progress "https://dl-cdn.alpinelinux.org/alpine/v3.22/releases/$(uname -m)/alpine-minirootfs-3.22.0-$(uname -m).tar.gz" -O alpine-minirootfs.tar.gz
            tar -xf alpine-minirootfs.tar.gz -C "$alpinebuild"
            rm -f "$alpinebuild/sbin/init"
            rm -f alpine-minirootfs.tar.gz
            echo "nameserver 1.1.1.1" > $alpinebuild/etc/resolv.conf
            cat <<EOF > $alpinebuild/etc/apk/repositories
http://dl-cdn.alpinelinux.org/alpine/edge/main
http://dl-cdn.alpinelinux.org/alpine/edge/community
http://dl-cdn.alpinelinux.org/alpine/edge/testing
EOF
            chroot $alpinebuild apk add bash
            touch "$alpinebuild/etc/.exists"
            mkdir -p "$alpinebuild/shims"
            cp "$basebuildshim" "$alpinebuild/shims/$board_name.bin"
        else
            echo "Please remove the existing alpine build environment before creating another."
        fi
        sync
    fi
    if [ "${buildenvname}" = "cros" ]; then
        if [ ! -e "${aroot}/build/env/${buildenvname}/etc/.exists" ]; then
            mkdir -p "$crosbuild/shims"
            if cp "$basebuildshim" "$crosbuild/shims/$board_name.bin"; then
                export crosbuild="$aroot/build/env/cros"
                crosbuildloopdev=$(losetup -Pf --show "$basebuildshim")
                crosbuildlooproota=$(lsblk -pro NAME,PARTLABEL "$crosbuildloopdev" | grep "ROOT-A" | awk '{print $1}')
                crosbuildtempdir=$(mktemp -d)
                mount "$crosbuildlooproota" "$crosbuildtempdir" -o ro
                cp -ra "$crosbuildtempdir/." "$crosbuild"
                umount "$crosbuildlooproota"
                rm -f "$crosbuild/sbin/init"
                touch "$crosbuild/etc/.exists"
            else
                echo "Raw shim failed to download/copy."
            fi
        else
            echo "Please remove the existing cros build environment before creating another." 
        fi
        sync
    fi
    if [ "${buildenvname}" = "debian" ]; then
        if [ ! -e "${aroot}/build/env/${buildenvname}/etc/.exists" ]; then
            arch=$(uname -m)
            export debianbuild="$aroot/build/env/debian"
            case "$arch" in
                x86_64)   dbsarch=amd64 ;;
                aarch64)  dbsarch=arm64 ;;
                *)        echo "Unsupported arch."; return 1 ;;
            esac
            debootstrap --arch="$dbsarch" bookworm "$debianbuild" http://deb.debian.org/debian
            touch "$debianbuild/etc/.exists"
            mkdir -p "$debianbuild/shims"
            cp "$basebuildshim" "$debianbuild/shims/$board_name.bin"
        else
            echo "Please remove the existing debian build environment before creating another."
        fi
        sync
    fi
    if [ "${buildenvname}" = "arch" ]; then
        if [ ! -e "${aroot}/build/env/${buildenvname}/etc/.exists" ]; then
            export archbuild="$aroot/build/env/arch"
            wget -q --show-progress https://raw.githubusercontent.com/tokland/arch-bootstrap/master/arch-bootstrap.sh -O arch-bootstrap.sh
            chmod +x arch-bootstrap.sh
            ./arch-bootstrap.sh "$archbuild"
            touch "$archbuild/etc/.exists"
            mkdir -p "$archbuild/shims"
            cp "$basebuildshim" "$archbuild/shims/$board_name.bin"
        else
            echo "Please remove the existing arch build environment before creating another."
        fi
        sync
    fi
}

aurorabuildenv-delete() {
    local buildenvname=""
    case "$1" in
        -al|--alpine)
            buildenvname="alpine"
            ;;
        -c|--cros)
            buildenvname="cros"
            ;;
        -d|--debian)
            buildenvname="debian"
            ;;
        -ar|--arch)
            buildenvname="arch"
            ;;
        *)
            echo "Usage: delete [-al | --alpine] [-c | --cros] [-d | --debian] [-ar | --arch]"
            return 1
            ;;
    esac
    read -p "Delete build environment? (y/N): " confirmdeletebuildenv
    case "$confirmdeletebuildenv" in
        y|Y)
            rm -rf "$aroot/build/env/$buildenvname" ;;
        *) ;;
    esac
}

aurorabuildenv-start() {
    local dist=""
    case "$1" in
        -al|--alpine)
            dist="alpine"
            ;;
        -c|--cros)
            dist="cros"
            ;;
        -d|--debian)
            dist="debian"
            ;;
        -ar|--arch)
            dist="arch"
            ;;
        *)
            echo "Usage: start [-al | --alpine] [-c | --cros] [-d | --debian] [-ar | --arch]"
            return 1
            ;;
    esac
    build="${dist}build"
    if [ -e "${aroot}/build/env/${dist}/etc/.exists" ]; then
        for mountpoint in /dev /proc /sys; do
            mount --bind "$mountpoint" "${!build}${mountpoint}"
        done

        clear
        chroot "${!build}" bash

        for mountpoint in /dev /proc /sys; do
            umount "${!build}${mountpoint}"
        done
        clear
        echo -e "${BLUE_B}aurorabuildenv 1.0 ${YELLOW_B}[$(uname -m)]${COLOR_RESET}"
        echo "'help' to display commands"
    else
        echo "Please create ${dist} environment first"
    fi
}

clear
echo -e "${BLUE_B}aurorabuildenv 1.0 ${YELLOW_B}[$(uname -m)]${COLOR_RESET}"
echo "'help' to display commands"
while true; do
    read -e -p "$(printf "${GEEN_B}(aurorabuildenv)> ${COLOR_RESET}")" aurorabuildenvopt
    read -ra aurora_args <<< "$aurorabuildenvopt"
    cmd="${aurora_args[0]}"
    flags="${aurora_args[@]:1}"
    case $cmd in
        start) aurorabuildenv-start $flags ;;
        create) aurorabuildenv-create $flags ;;
        delete) aurorabuildenv-delete $flags ;;
        help) aurorabuildenv-help ;;
        list) aurorabuildenv-list ;;
        exit) break ;;
        *) aurorabuildenv-help ;;
    esac
done