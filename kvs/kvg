#!/bin/bash

VB2_SHA256_DIGEST_SIZE=32
MAX_HEX_LENGTH=10

print_usage() {
    echo "USAGE: $0 <kernver> <optional flags>"
    echo "e.g.: $0 0x00010001 --raw"
    echo "--raw        - prints the output as raw hex bytes"
    echo "--ver=<0/1>  - specifies the kernver struct version to use"
    echo "--help       - shows this message"
    echo "KVG was created by kxtzownsu"
    echo "(made in bash by sophia)"
    exit 0
}

vb2_crc8() {
    local -n bytes=$1
    local crc=0

    for byte in "${bytes[@]}"; do
        crc=$((crc ^ (byte <\< 8)))
        for _ in {1..8}; do
            if ((crc & 0x8000)); then
                crc=$((crc ^ (0x1070 <\< 3)))
            fi
            crc=$((crc <\< 1))
        done
    done
    echo $(( (crc >\> 8) & 0xFF ))
}

is_valid_hex() {
    [[ "$1" =~ ^0x[0-9a-fA-F]+$ ]] && ((${#1} <= MAX_HEX_LENGTH))
}

convert_to_u32() {
    printf "%d\n" "$1"
}

print_hex() {
    for b in "${buffer[@]}"; do
        printf "%02x " "$b"
    done
    echo
}

# Parse args
[[ "$1" == "--help" || $# -lt 1 ]] && print_usage

kernver="$1"
shift

if ! is_valid_hex "$kernver"; then
    echo "The entered kernver: $kernver, wasn't valid hexadecimal (max 10 characters)." >&2
    exit 1
fi

kvarg=$((kernver))

ver="1"  # default
raw_out=0

for arg in "$@"; do
    case "$arg" in
        --ver=0) ver="0" ;;
        --ver=1) ver="1" ;;
        --raw) raw_out=1 ;;
        *) ;;
    esac
done

if [[ "$ver" != "0" && "$ver" != "1" ]]; then
    echo "Invalid struct version: $ver" >&2
    exit 1
fi

buffer=()

if [[ "$ver" == "0" ]]; then
    # Vb2SecdataKernelV0
    struct_version=0x02
    uid=$((0x4752574c))
    reserved=(0x00 0x00 0x00)

    buffer=(
        $struct_version
        $(( (uid >\>  0) & 0xFF ))
        $(( (uid >\>  8) & 0xFF ))
        $(( (uid >\> 16) & 0xFF ))
        $(( (uid >\> 24) & 0xFF ))
        $(( (kvarg >\>  0) & 0xFF ))
        $(( (kvarg >\>  8) & 0xFF ))
        $(( (kvarg >\> 16) & 0xFF ))
        $(( (kvarg >\> 24) & 0xFF ))
        "${reserved[@]}"
    )

    crc=$(vb2_crc8 buffer)
    buffer+=($crc)

elif [[ "$ver" == "1" ]]; then
    # Vb2SecdataKernelV1
    struct_version=0x10
    struct_size=$((3 + 1 + 4 + VB2_SHA256_DIGEST_SIZE)) # 40
    crc8=0
    flags=0x00

    buffer=(
        $struct_version
        $struct_size
        0x00
        $flags
        $(( (kvarg >\>  0) & 0xFF ))
        $(( (kvarg >\>  8) & 0xFF ))
        $(( (kvarg >\> 16) & 0xFF ))
        $(( (kvarg >\> 24) & 0xFF ))
    )

    for _ in $(seq 1 $VB2_SHA256_DIGEST_SIZE); do
        buffer+=(0x00)
    done

    # CRC over buffer[3..]
    crc_input=("${buffer[@]:3}")
    crc=$(vb2_crc8 crc_input)

    buffer[2]=$crc
fi

if ((raw_out)); then
    for b in "${buffer[@]}"; do
        printf "\\x%02x" "$b"
    done
else
    print_hex
fi
