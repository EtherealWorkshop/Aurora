#!/bin/bash

# Copyright 2025 Ethereal Workshop. All rights reserved.
# Use of this source code is governed by the BSD 3-Clause license
# that can be found in the LICENSE.md file.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS”
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#This is the automated buildscript for Aurora

export COLOR_RESET="\033[0m"
export BLACK_B="\033[1;30m"
export RED_B="\033[1;31m"
export GEEN="\033[0;32m"
export GEEN_B="\033[1;32m"
export YELLOW="\033[0;33m"
export YELLOW_B="\033[1;33m"
export BLUE_B="\033[1;34m"
export MAGENTA_B="\033[1;35m"
export PINK_B="\x1b[1;38;2;235;170;238m"
export CYAN_B="\033[1;36m"

echo_c() {
    local text="$1"
    local color_variable="$2"
    local color="${!color_variable}"
    echo -e "${color}${text}${COLOR_RESET}"
}

cleanup() {
    for dir in proc sys dev run; do umount -l "$rootfs/$dir"; done
    rm -rf "$rootfs" "$initramfs" "$statemount" "$root_amount" "$root_bmount"
}

lsbval() {
  local key="$1" lsbfile="${2:-$rootfs/etc/lsb-release}"
  echo "$key" | grep -Eq '^[a-zA-Z0-9_]+$' || return 1
  sed -E -n -e "/^[[:space:]]*${key}[[:space:]]*=/{
    s:^[^=]+=[[:space:]]*::
    s:[[:space:]]+$::
    p
  }" "$lsbfile"
}

export shim=$(realpath -m $1)
source ./checks
[ -n "$2" ] && payloads=$(realpath -m "$2")
aurorashim="./aurora-$(basename "$shim")"

[ -z "$shim" ] && echo_c "Please run on a raw shim." RED_B
initramfs=$(mktemp -d)
rootfs=$(mktemp -d)
[ -z "usr/share/aurora/aurora.sh" ] && echo_c "Please run in the base directory of Aurora." RED_B

if findmnt -T "$initramfs" -o OPTIONS -n | grep -qE 'noexec|nodev'; then
    mount -o remount,dev,exec "$(findmnt -T "$initramfs" -o TARGET -n)"
fi
rm -f "$aurorashim"

truncate -s 694200K "$aurorashim" # haha 69

echo_c "\nBootstrapping Alpine" BLUE_B
curl -sL "https://dl-cdn.alpinelinux.org/alpine/v3.22/releases/$arch/alpine-minirootfs-3.22.0-$arch.tar.gz" -o alpine-minirootfs.tar.gz 

tar -xf alpine-minirootfs.tar.gz -C "$initramfs"
rm -f "$initramfs/sbin/init" "alpine-minirootfs.tar.gz"

echo "nameserver 1.1.1.1" > "$initramfs/etc/resolv.conf"

trap cleanup EXIT

cp -r initramfs/. "$initramfs/"
cp -r patches/initramfs/. "$initramfs/"
echo_c "Done.\n\n${BLUE_B}Installing Bootloader Packages" GEEN_B
chroot "$initramfs" /bin/sh -c "export PATH=/sbin:/bin:/usr/sbin:/usr/bin && chmod +x /opt/setup_initramfs_alpine.sh && /opt/setup_initramfs_alpine.sh $arch"

tools=$(wget -qO- https://dl-cdn.alpinelinux.org/alpine/latest-stable/main/x86_64/ | grep "apk-tools-static" | awk -F "href=\"" '{print $2}' | awk -F "\">" '{print $1}')
wget -q --show-progress "https://dl-cdn.alpinelinux.org/alpine/latest-stable/main/x86_64/$tools" -O $rootfs/apk-tools-static
tar --warning=no-unknown-keyword -xzf "$rootfs/apk-tools-static" -C "$rootfs"
$rootfs/sbin/apk.static --arch $(uname -m) -X http://dl-cdn.alpinelinux.org/alpine/edge/main/ -U --allow-untrusted --root "$rootfs" --initdb add alpine-base
echo "nameserver 1.1.1.1" > "$rootfs/etc/resolv.conf"

mkdir -p "$rootfs/usr/share/patches/rootfs"
cp -r patches/rootfs/. "$rootfs/usr/share/patches/rootfs/"
echo_c "Done.\n\n${BLUE_B}Installing Rootfs Packages" GEEN_B
chroot "$rootfs" /bin/sh -c "export PATH=/sbin:/bin:/usr/sbin:/usr/bin && chmod +x /opt/setup_rootfs_alpine.sh && /opt/setup_rootfs_alpine.sh $arch"
echo_c "Done.\n\n${BLUE_B}Downloading firmware..." GEEN_B
git clone --depth=1 https://chromium.googlesource.com/chromiumos/third_party/linux-firmware $rootfs/lib/firmware/
rm -rf $(find "$rootfs/lib/firmware/"* -not -path "*wifi*") >/dev/null
cp -r rootfs/. "$rootfs/"

trap - EXIT

echo_c "Done.\n\n${BLUE_B}Building shim..." GEEN_B

shimdev=$(losetup -Pf --show "$shim")
dev=$(losetup -Pf --show "$aurorashim")

chromeos=$(cgpt find -l ROOT-A "$shimdev" | head -n 1)
tempmount=$(mktemp -d)
echo_c "Done.\n\n${BLUE_B}Copying Modules..." GEEN_B
mount -o ro "$chromeos" "$tempmount"
if [ -d "$tempmount/lib/modules" ]; then
  cp -ar "$tempmount/lib/modules" $rootfs/lib/
  cp -ar "$tempmount/etc/lsb-release" $rootfs/etc/lsb-release
  export boardname=$(lsbval CHROMEOS_RELEASE_BOARD)
  mkdir -p $rootfs/mount/usr/bin $rootfs/mount/lib64
  cp -r "$tempmount/lib64"/* $rootfs/mount/lib64
  cp "$tempmount/usr/bin/tpmc" $rootfs/mount/usr/bin/tpmc
  cp "$tempmount/bin/sh" $rootfs/mount/usr/bin/sh
  cp "$tempmount/bin/cat" $rootfs/mount/usr/bin/cat
  cp "lib/$arch/kvg" $rootfs/mount/usr/bin/kvg
  umount "$tempmount"
else
  echo_c "Please run on a raw shim." RED_B
  exit
fi

echo_c "Done.\n\n${BLUE_B}Partitioning shim..." GEEN_B
sgdisk --zap-all "$dev"
sgdisk -n 1:2048:10239 -c 1:"STATE" "$dev"
sgdisk -n 2:10240:75775 "$dev"
sgdisk -n 3:75776:152575 -c 3:"AuroraBoot" "$dev"
sgdisk -n 4:152576:0 -c 4:"Aurora" "$dev"
sgdisk -t 3:3CB8E202-3B7E-47DD-8A3C-7FF2A13CFCEC "$dev"
sgdisk -t 4:8300 "$dev"
sgdisk -p "$dev"

kernelpartition="${dev}p2"
skpart=$(cgpt find -l KERN-A "$shimdev" | head -n 1)
skpartnum="${skpart##*p}"
sgdisk -i "$skpartnum" "$shimdev"
dd if="$skpart" of="$kernelpartition" status=none

sgdisk --partition-guid=2:B5BAF579-07EF-A747-858B-87C0E507CD29 "$dev"
cgpt add -i 2 -t "$(cgpt show -i "$skpartnum" -t "$shimdev")" -l "$(cgpt show -i "$skpartnum" -l "$shimdev")" -P 15 -T 15 -S 1 "$dev" >/dev/null

state="${dev}p1"
root_a="${dev}p3"
root_b="${dev}p4"

mkfs.ext4 -F "$state" -L "STATE" >/dev/null 2>&1
mkfs.ext4 -F "$root_a" -L "AuroraBoot" >/dev/null 2>&1
mkfs.ext4 -F "$root_b" -L "Aurora" >/dev/null 2>&1

statemount=$(mktemp -d)
root_amount=$(mktemp -d)
root_bmount=$(mktemp -d)

mount "$state" "$statemount"
mkdir -p "$statemount/dev_image/etc/"
touch "$statemount/dev_image/etc/lsb-factory"

mount "$root_a" "$root_amount"
mount "$root_b" "$root_bmount"

echo_c "Done.\n\n${BLUE_B}Copying rootfs to shim" "GEEN_B"
rm -f "$rootfs/sbin/init"
cp -ar rootfs/. "$rootfs"
[ -n "$2" ] && cp -r "$payloads"/. "$rootfs"
rsync -avH --info=progress2 --delete "$rootfs/." "$root_bmount" &>/dev/null

echo_c "Done.\n\n${BLUE_B}Copying initramfs to shim" "GEEN_B"
rm -f "$initramfs/bin/init"
cp -ar initramfs/. "$initramfs"
rsync -avH --info=progress2 --delete "$initramfs/." "$root_amount" &>/dev/null

chmod +x "$root_amount/init" "$root_amount/sbin/init" "$root_amount/bootstrap.sh" 2>/dev/null
chmod +x "$root_bmount/sbin/init" "$root_bmount/usr/bin/"* "$root_bmount/usr/share/aurora/"* 2>/dev/null
sync

echo_c "Done.\n\n${BLUE_B}Cleaning up...\n" "GEEN_B"
umount "$statemount" "$root_amount" "$root_bmount"
umount "$statemount" -l 2>/dev/null
umount "$root_amount" -l 2>/dev/null
umount "$root_bmount" -l 2>/dev/null

losetup -D
rm -rf "$rootfs" "$initramfs" "$statemount" "$root_amount" "$root_bmount"
mv "$aurorashim" "${boardname}-aurora.bin" 2>/dev/null
finalshim="${boardname}-aurora.bin"

echo -e "${MAGENTA_B}Credits"
echo -e "${PINK_B}Sophia${COLOR_RESET}: Lead developer of Aurora, Got Wifi"
echo -e "${RED_B}Mariah Carey${COLOR_RESET}: Bugfixing and bugtesting"
echo -e "${YELLOW_B}xmb9${COLOR_RESET}: ${GEEN_B}[PRIISM]${COLOR_RESET} Made Priism, Giving Aurora the ability to Boot Shims & Use Reco Images"
echo -e "${YELLOW_B}Synaptic${COLOR_RESET}: Emotional Support"
echo -e "${CYAN_B}Simon${COLOR_RESET}: ${BLUE_B}[IRS]${COLOR_RESET} Brainstormed how to do wifi, helped with dhcpcd"
echo -e "${BLUE_B}kraeb${COLOR_RESET}: ${BLUE_B}[IRS]${COLOR_RESET} QoL improvements and initial idea"
echo -e "${MAGENTA_B}AC3${COLOR_RESET}: Literally nothing"
echo -e "${GEEN_B}kxtz${COLOR_RESET}: KVG\n"
echo_c "Done!" GEEN_B